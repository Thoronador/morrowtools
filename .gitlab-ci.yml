build_docker_image:
  image: docker:20
  stage: build
  services:
    - docker:20-dind
  script:
    - cd ci/
    - docker build -t $CI_REGISTRY/striezel/morrowtools/ci-cross-win64:12.2-deb12 . -f Dockerfile_cross_win64
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY/striezel/morrowtools/ci-cross-win64:12.2-deb12
    - docker logout $CI_REGISTRY
  # Only build new image when the Dockerfile or the GitLab CI configuration
  # changes.
  only:
    changes:
      - ci/Dockerfile_cross_win64
      - .gitlab-ci.yml

win64_cross:
  image: registry.gitlab.com/striezel/morrowtools/ci-cross-win64:12.2-deb12
  stage: test
  before_script:
    - apt-get update && apt-get -y upgrade
  script:
    # build
    - export CXX=x86_64-w64-mingw32-c++
    - export CC=x86_64-w64-mingw32-gcc
    - mkdir build
    - cd build
    - cmake -DENABLE_LTO=ON -DENABLE_STATIC_LINKING=ON ../
    - make -j2
    # tests
    - ctest -V
    # Collect build artifacts in one place.
    - mkdir -p artifacts
    - cp apps/mw/cell_translator/cell_translator.exe artifacts/
    - cp apps/mw/data_cleaner/data_cleaner.exe artifacts/
    - cp apps/mw/name_generator/name_generator.exe artifacts/
    - cp apps/mw/skill_rebalance/skill_rebalance.exe artifacts/
    - cp apps/mw/spell_rename/spell_rename.exe artifacts/
    - cp apps/sr/bsa_cli/bsa-cli.exe artifacts/
    - cp apps/sr/conv_cams/conv_cams.exe artifacts/
    - cp apps/sr/formID_finder/formID_finder.exe artifacts/
    - cp apps/sr/small_high_elves/small_high_elves.exe artifacts/
    # build artifacts
  artifacts:
    paths:
      - build/artifacts/

coverage:
  image: debian:12-slim
  stage: test
  before_script:
    - apt-get update && apt-get -y upgrade
    - apt-get install -y catch cmake g++-12 lcov liblz4-dev pkg-config zlib1g-dev
  script:
    # build
    - export CXX=g++-12
    - export CC=gcc-12
    - mkdir build-coverage
    - cd build-coverage
    - cmake -DCODE_COVERAGE=ON ../
    - make -j2
    # tests
    - ctest -V
    # collect code coverage data
    - lcov -c --directory . --output-file main_coverage.info
    - lcov --remove main_coverage.info '/usr/include/*' '*tests/*' -o main_coverage_filtered.info
    - genhtml main_coverage_filtered.info --output-directory ../public
  coverage: /^[\t ]*lines\.*:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    paths:
      - public

pages:
  image: debian:12-slim
  stage: deploy
  needs: ["coverage"]
  dependencies:
  - coverage
  script:
    - ls -l
  artifacts:
    paths:
      - public
